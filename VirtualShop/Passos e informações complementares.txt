Pacotes
-----------------------------------------------------------------------------------------------------
VirtualShop.ProductApi

- Pomelo.EntityFrameworkCore.MySql - versão 6.0.1
- Microsoft.EntityFrameworkCore.Design - versão 6.0.4
- AutoMapper.Extensions.Microsoft.DependencyInjection - versão 11.0.0
- AutoMapper - versão 11.0.1
- Microsoft.AspNetCore.Authentication.JwtBearer - versão 6.0.6

VirtualShop.IdentityServer
- Duende.IdentityServer.AspNetIdentity - versão 6.1.0
- Microsoft.AspNetCore.Identity.EntityFrameworkCore - versão 6.0.5
- Microsoft.AspNetCore.Identity.UI - versão 6.0.5
- Pomelo.EntityFrameworkCore.MySql - versão 6.0.1
- Microsoft.EntityFrameworkCore.Design - versão 6.0.5

VirtualShop.Web
- Microsoft.AspNetCore.Authentication - versão 2.2.0
- Microsoft.AspNetCore.Authentication.OpenIdConnect - versão 6.0.6
- System.IdentityModel.Tokens.Jwt - versão 6.19.0
-----------------------------------------------------------------------------------------------------
Criação de Loja Virtual com Micro Serviços

1 - criar solução em branco (blank solution)

2 - adicionar novo projeto a solução (asp.net core web api) -> VirtualShop.ProductApi

3 - criar models e aplicar seus relacionamentos

4 - criar a context

5 - definir string de conexão no appsettings.json

6 - incluir na program.cs a configuração do mysql
Dica: A context está recebendo a conexão e as options por injeção de dependencia das informações adicionadas na program

7 - na context, realizar as configurações de FluentAPI e sobrescrever cofigurações padrões

8 - realizar a migração inicial 
dotnet tool install --global dotnet-ef --version 6.0.0
dotnet ef migrations add Inicial
dotnet ed database update

9 - Criar as DTOs
adicionar DTOs, MappingProfile e adicionar automapper ao program.cs

10 - Criar os repositórios

11 - Criar os serviços e controllers
*lembrar de adicionar o IgnoreCycles ao controller na program.cs

12 - após baixar o pacote do bearer, configurar o jwt e swagger na program.cs

13 - em AccountContrller substituir tudo que for TestUserStore para o UserManager
*validar todas as injeções e métodos com detalhes

-----------------------------------------------------------------------------------------------------
Criação da aplicação MVC Web para consumir Api
1 - adicionar novo projeto a solução (asp.net core web app - MVC) -> VirtualShop.Web
*excluir view privacy e ajustar shared -> error

2 - adicionar item existente -> imagem

3 - adicionar font awesome ao projeto
no arquivo views -> shared -> _layout foi adicionado o link do cdn

4 - criar as models

5 - criar os services e suas interfaces (contract)

6 - adicionar o AddHttpClient na program.cs, com o serviço e seu nome

7 - Criar a pasta Roles e seus arquivos

8 - baixar os pacotes listados acima

9 - adicionar o AddAuthentication na program e suas configurações

10 - criar view link de login. Views -> shared -> _LoginPartial e adicionar a Views -> shared -> _layout
*mesma que o identity usa

11 - criar login e logout no homecontroller
-----------------------------------------------------------------------------------------------------
Criação da aplicação MVC Web
1 - adicionar novo projeto a solução (asp.net core web app - MVC) -> VirtualShop.IdentityServer

2 - instalar o Duende Software
dotnet new --install Duende.IdentityServer.Templates::6.0.0

3 - adicionar os arquivos da pasta razor view
*a documentação sugere o uso do comando "dotnet new isui", mas será feita a inclusão de razor view manualmente conforme o curso

4 - instalar pacotes

5 - criar pasta Data e seus arquivos
*referenciar no program.cs

6 - criar pasta configuration e seus arquivos
*referenciar no program.cs // adicionar o middleware app.UseIdentityServer();

7 - reodar as migrações no banco
dotnet ef migrations add DatabaseIdentitServer
dotnet ed database update

8 - criar o seeder, para criar usuario e perfil no banco
*referenciar no program.cs //adicionar ao escopo e SeedDatabaseIdentityServer

9 - Criar a pasta Roles e seus arquivos
-----------------------------------------------------------------------------------------------------
DICAS GERAIS

Para manipular migrações pode-se usar o EF Core Migrations : Ferramenta dotnet-ef
Ex de comandos: dotnet ef migrations add <nome migração>

Como alternativa é possivel instalar o microsoft.entityframeworkcore.tools
Ex de comandos: add migrations <nome> e update database
-----------------------------------------------------------------------------------------------------